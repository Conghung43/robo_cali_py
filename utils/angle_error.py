import os,sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import cam_rotation_eye_hand as rot
import geometry_calculation as cal
import numpy as np
import math
import fit_skspatial as fit
import matplot_show as mat
# fit a fifth degree polynomial to the economic data
from numpy import arange
# from pandas import read_csv
from scipy.optimize import curve_fit
from matplotlib import pyplot

# cam_data_x = [[-153.12394748131433, 51.21633286277453, 553.393562634786], [-140.757126112779, 48.46314899623394, 553.3854365348816], [-129.28209950526556, 46.17740338047346, 554.0208617846171], [-117.99925069014232, 43.90782800813516, 554.2210936546326], [-106.57867789268494, 41.62399967511495, 554.0092289447784], [-94.39266348878543, 39.20890639225642, 554.6840329964956], [-83.38963240385056, 37.00933294991652, 555.4965635140737], [-72.21348583698273, 34.723163271943726, 555.7812849680582], [-61.111101880669594, 32.58516577382883, 555.8425982793173], [-48.9975834886233, 30.229523467520874, 556.0300946235657], [-38.03239203989506, 27.975695828596752, 556.1678608258566], [-26.987183218201, 25.860282592475414, 556.2836031119028], [-16.03346100697915, 23.665149696171284, 556.9467544555664], [-3.994724713265896, 21.252415763835113, 556.9710632165273], [6.930879006783168, 19.1202275454998, 557.4247638384501], [17.96645236512025, 16.960572451353073, 557.4559966723124], [28.89201541741689, 14.84587307398518, 557.4675897757212], [40.94213557740053, 12.502056701729694, 558.1296483675638], [51.88395828008652, 10.295809557040533, 559.1215590635935], [62.93358777960141, 8.152772672474384, 559.3264301617941], [73.91071443756421, 6.078787225609024, 559.6771736939749], [85.95947672923405, 3.6477441511427364, 559.8924160003662], [97.13796650369962, 1.5437751426361501, 560.7361396153768], [107.21285392840703, -0.5157725002694254, 560.9201490879059], [119.37519038716952, -2.986640164939066, 561.2083375453949], [130.5494780341784, -5.109856370836496, 561.4329278469086], [141.77415271600088, -7.308067753911018, 561.6655250390371], [153.15070003271103, -9.611585332701603, 562.0358685652415], [165.36536812782288, -11.982249561697245, 561.7303748925527], [176.60173773765564, -14.143936180820068, 561.8426303068796], [188.05955102046332, -16.49219822138548, 562.3194873332977], [199.4136149684588, -18.66357773542404, 562.2650980949402], [211.80090059836706, -21.039810342093308, 562.5057915846506], [223.2704684138298, -23.37870125969251, 563.0729297796885], [234.6582661072413, -25.613463173309963, 563.4248157342275], [245.83064019680023, -27.76322017113368, 563.5324319203695], [258.01680485407513, -30.261753747860592, 563.5926226774851], [269.0443942944209, -32.409682869911194, 563.5775327682495], [280.41347364584607, -34.58965880175432, 564.5579198996226], [291.0427947839101, -36.85225980977217, 564.122716585795]]
# cam_data_y = [[73.04606214165688, -129.13692245880762, 563.6226733525594], [74.16499530275662, -123.12675888339679, 563.285897175471], [75.53938403725624, -116.24376475811005, 562.8345708052317], [76.77801201740901, -110.34892002741496, 563.0451838175455], [78.26168462634087, -103.24778656164806, 563.6840959390005], [79.43424582481384, -97.06579272945721, 563.4236534436544], [80.84266508618991, -90.13654291629791, 563.2997850577036], [81.92593355973561, -84.14619043469429, 562.7534786860148], [83.33222692211469, -77.2008200486501, 562.5289777914683], [84.53875283400218, -71.04370991388957, 562.5347296396891], [85.83492661515872, -63.92662848035495, 561.9109074274699], [87.09187184770902, -58.01952506105105, 561.9456171989441], [88.48316719134648, -51.136509204904236, 561.7569784323374], [89.68525752425194, -44.967470690608025, 561.3611340522766], [91.08289827903111, -37.992184360822044, 561.1689786116282], [92.31037894884746, -32.02571036914984, 560.9074334303538], [93.72882669170697, -24.993484218915302, 560.7454081376394], [94.8902169863383, -18.956460369129974, 560.4328910509745], [96.3696800172329, -12.016446640094122, 560.1933300495148], [97.60794788599014, -5.96618823086222, 560.1805746555328], [99.07575572530429, 1.0896017192862928, 559.9201818307241], [100.26203592618306, 6.997187156230211, 559.3171914418539], [101.7805611093839, 14.172375512619814, 559.2060486475626], [103.11204940080643, 20.23198114087184, 559.5185657342275], [104.64288294315338, 27.270108461380005, 559.6041878064474], [105.98959525426228, 33.32447881499926, 559.7453812758127], [107.34724874297778, 40.375287334124245, 558.894673983256], [108.69103049238522, 46.417503307263054, 558.9144229888916], [110.16930515567462, 53.52917437752088, 558.785875638326], [111.40231291453044, 59.57992933690548, 558.3182871341705], [112.96330764889717, 66.6171374420325, 558.2002798716227], [114.25154035290082, 72.82990341385205, 558.2071840763092], [115.79134687781334, 79.95760689179103, 557.8125417232513], [117.13945493102074, 86.1109010875225, 557.7893356482188], [118.70031679670016, 93.34088489413261, 557.8148365020752], [119.95619783798854, 99.51813519001007, 557.3495626449585], [121.58353254199028, 106.78171118100484, 557.319442431132], [122.91801224152248, 113.05274441838264, 557.3113759358724], [124.41944455107053, 120.26260296503703, 556.9282571474711], [125.84635615348816, 126.53842568397522, 556.7257304986318]]
# robot_data_x = [[1170, -250.0, 1470], [1170, -238.75, 1470], [1170, -227.5, 1470], [1170, -216.25, 1470], [1170, -205.0, 1470], [1170, -193.75, 1470], [1170, -182.5, 1470], [1170, -171.25, 1470], [1170, -160.0, 1470], [1170, -148.75, 1470], [1170, -137.5, 1470], [1170, -126.25, 1470], [1170, -115.0, 1470], [1170, -103.75, 1470], [1170, -92.5, 1470], [1170, -81.25, 1470], [1170, -70.0, 1470], [1170, -58.75, 1470], [1170, -47.5, 1470], [1170, -36.25, 1470], [1170, -25.0, 1470], [1170, -13.75, 1470], [1170, -2.5, 1470], [1170, 8.75, 1470], [1170, 20.0, 1470], [1170, 31.25, 1470], [1170, 42.5, 1470], [1170, 53.75, 1470], [1170, 65.0, 1470], [1170, 76.25, 1470], [1170, 87.5, 1470], [1170, 98.75, 1470], [1170, 110.0, 1470],[1170, 121.25, 1470], [1170, 132.5, 1470], [1170, 143.75, 1470], [1170, 155.0, 1470], [1170, 166.25, 1470], [1170, 177.5, 1470], [1170, 188.75, 1470]]
# robot_data_y = [[1040.0, 0, 1470], [1046.5, 0, 1470], [1053.0, 0, 1470], [1059.5, 0, 1470], [1066.0, 0, 1470], [1072.5, 0, 1470], [1079.0, 0, 1470], [1085.5, 0, 1470], [1092.0, 0, 1470], [1098.5, 0, 1470], [1105.0, 0, 1470], [1111.5, 0, 1470], [1118.0, 0, 1470], [1124.5, 0, 1470], [1131.0, 0, 1470], [1137.5, 0, 1470], [1144.0, 0, 1470], [1150.5, 0, 1470], [1157.0, 0, 1470], [1163.5, 0, 1470], [1170.0, 0, 1470], [1176.5, 0, 1470], [1183.0, 0, 1470], [1189.5, 0, 1470], [1196.0, 0, 1470], [1202.5, 0, 1470], [1209.0, 0, 1470], [1215.5, 0, 1470], [1222.0, 0, 1470], [1228.5, 0, 1470], [1235.0, 0, 1470], [1241.5, 0, 1470], [1248.0, 0, 1470], [1254.5, 0, 1470], [1261.0, 0, 1470], [1267.5, 0, 1470], [1274.0, 0, 1470], [1280.5, 0, 1470], [1287.0, 0, 1470], [1293.5, 0, 1470]]

# rz, rx, ry = rot.find_camera_rotation(cam_data_x, cam_data_y)


# X = [[-0.25571924944718677, 0.06818132599194844, 0.5464675923188528], [-0.24031103402376175, 0.06480483338236809, 0.5464420914649963], [-0.22594460099935532, 0.06171835089723269, 0.5470995406309763], [-0.21051450818777084, 0.05862062113980452, 0.5479190051555634], [-0.19589638958374658, 0.055563499530156456, 0.5483923852443695], [-0.18014048536618552, 0.05243348081906637, 0.5487152834733328], [-0.165580153465271, 0.049536991864442825, 0.5493611494700114], [-0.15004964669545492, 0.04635665751993656, 0.5502361257870992], [-0.13553558786710104, 0.043436129267017044, 0.5505509277184805], [-0.11998605479796727, 0.040165078515807785, 0.5504514575004578], [-0.1056710568567117, 0.03723900641004244, 0.5507719914118449], [-0.09050925076007843, 0.03413668833673, 0.551714152097702], [-0.07636709759632747, 0.03126313226918379, 0.5521771013736725], [-0.061121164510647454, 0.028155226881305378, 0.5514514446258545], [-0.04719865508377552, 0.02525791184355815, 0.5524004896481832], [-0.03217770904302597, 0.02221630048006773, 0.5529721875985464], [-0.018148670593897503, 0.019329619593918324, 0.5526956021785736], [-0.003225288004614413, 0.016308693525691826, 0.553041676680247], [0.010663611503938833, 0.013444610560933748, 0.5531053145726522], [0.0256107406069835, 0.010456766312321028, 0.5540995498498281], [0.039554848646124206, 0.007644723867997527, 0.5547847052415212], [0.05446400369207064, 0.004617296624928713, 0.5554502606391907], [0.06839899842937787, 0.001811500173062086, 0.555483877658844], [0.08247208595275879, -0.0010844418041718502, 0.5562777916590372], [0.09755959361791611, -0.004235334151114027, 0.5568240781625112], [0.11177292466163635, -0.007159732437382142, 0.557469924290975], [0.1268844480315844, -0.0102563362258176, 0.5575370589892069], [0.14116156846284866, -0.013152309538175663, 0.5579167207082113], [0.1565521036585172, -0.016330329701304436, 0.5584907432397207], [0.17093466222286224, -0.019181575315694015, 0.5585636893908182], [0.18637088437875113, -0.022317904358108837, 0.558586855729421], [0.20097371190786362, -0.025292871830364067, 0.559458315372467], [0.21649815638860068, -0.02838063022742669, 0.5597569644451141], [0.23085392266511917, -0.0313578670223554, 0.5597696602344513], [0.24586007495721182, -0.03439955972135067, 0.559722234805425], [0.25980358322461444, -0.037256687258680664, 0.5594328741232554], [0.27531970540682477, -0.04046661530931791, 0.5607638657093048], [0.28925905625025433, -0.04332482007642587, 0.5610706110795339], [0.30394889414310455, -0.046446808924277626, 0.561334510644277], [0.31810813148816425, -0.049293062960108124, 0.562120387951533]]
# Y = [[0.036552012587587036, -0.15870747218529382, 0.5609467625617981], [0.038101630906263985, -0.1508325735727946, 0.5606076816717783], [0.039734398325284324, -0.14260331044594446, 0.5600115855534872], [0.04140712941686312, -0.1345943883061409, 0.5599131981531779], [0.04306254039208094, -0.12652468184630075, 0.5599073966344198], [0.04471477804084619, -0.11852383613586426, 0.5596944689750671], [0.04635118444760641, -0.11035369088252385, 0.5590416888395945], [0.0480247667680184, -0.10243334993720055, 0.5591759085655212], [0.049678981925050415, -0.09435143570105235, 0.5589247941970825], [0.051295838629206024, -0.08638450503349304, 0.5585683186848959], [0.052993509297569595, -0.07844001178940137, 0.5590845346450806], [0.05458564745883147, -0.0704407940308253, 0.5584329267342886], [0.05626292278369268, -0.06242871346573035, 0.558277815580368], [0.057816789795955024, -0.05442932744820913, 0.557486097017924], [0.05950658768415451, -0.04642672402163347, 0.5573136806488037], [0.061208900064229965, -0.038458844646811485, 0.5575833717981974], [0.06283424546321233, -0.030549103394150734, 0.5570972263813019], [0.06464868163069089, -0.022465905795494717, 0.5577430427074432], [0.06622131913900375, -0.014527621368567148, 0.5568576653798422], [0.06789802511533101, -0.0065130942190686865, 0.556247740983963], [0.06963502367337544, 0.0014541139438127477, 0.5565856595834097], [0.07124308372537295, 0.009463496506214142, 0.5559132198492686], [0.07295326888561249, 0.017564655281603336, 0.5557894011338552], [0.07469292109211285, 0.025494013912975788, 0.5550949474175771], [0.07644921044508617, 0.03348431115349134, 0.5551111698150635], [0.07805544510483742, 0.04153944551944733, 0.5544629693031311], [0.07977290203173955, 0.04957745658854643, 0.5543102025985718], [0.08164536952972412, 0.05770509069164594, 0.5549225012461344], [0.08342367907365163, 0.06587356328964233, 0.5547118286291758], [0.08521197612086932, 0.07394540682435036, 0.5547419389088949], [0.08686202888687451, 0.08206405366460483, 0.5542465547720591], [0.08855795363585155, 0.09017099936803182, 0.5534432927767435], [0.09042946125070254, 0.09848391016324361, 0.5533483723799387], [0.09227925911545753, 0.10681808615724246, 0.5535127023855845], [0.09395311648646991, 0.1148989237844944, 0.5527952015399933], [0.09583618616064389, 0.12319269155462582, 0.5528726776440939], [0.09773784627517064, 0.1315047691265742, 0.5528565148512522], [0.09952744593222936, 0.13987132658561072, 0.552365799744924], [0.10150267059604327, 0.14848697682221731, 0.5531030495961508], [0.10334186255931854, 0.15698379774888357, 0.5527708729108175]]

# X_rotated = [[-0.24946992855602637, 0.0005773857696144431, 0.5535632561672974], [-0.23370421702097902, 0.00035156550986120694, 0.5531096041258268], [-0.2189985371847492, 0.0001826676550791273, 0.5533693452481125], [-0.20324433115325685, 0.00021093653527340037, 0.5537686059635931], [-0.18830287300080809, 0.00012619186148355235, 0.5538401558403375], [-0.17223635088414593, 0.00020167364029201156, 0.5537354291156061], [-0.15737888684821624, 0.00025794458416232395, 0.5539857333637579], [-0.14150837624352536, 0.00022385244296919786, 0.5544357128054187], [-0.1267003050656383, 0.00025646117684772, 0.5543553768475599], [-0.11081914251586965, 0.00016420672345541544, 0.5538282988713555], [-0.09620481226146514, 0.0001514302685427342, 0.5537576306887346], [-0.08070922290749759, 0.00011818297966176977, 0.554284900533189], [-0.06627086337301559, 0.00011835687490491936, 0.5543618195505926], [-0.05073634941971802, 0.00014246899549758343, 0.5532205815784179], [-0.03649541978099715, 6.204983740658657e-05, 0.5537870137523931], [-0.021159815505753382, 7.031913752313969e-05, 0.5539489746238201], [-0.006849423434655484, 5.5426496183515195e-05, 0.5532888209895657], [0.008380454428887706, 7.067467881849768e-05, 0.5532280136627045], [0.02255816358519972, 4.05113913559442e-05, 0.5529114637864232], [0.037822045514771814, 7.502637305029786e-05, 0.5534989181417185], [0.05206008953805652, 8.972356383658668e-05, 0.5538039689739763], [0.06728586842527144, 8.694589245845236e-05, 0.5540624906281836], [0.08149631829002951, 0.00012391356571208982, 0.5537168749537285], [0.0958803312834229, 7.92234006494353e-05, 0.5541252189398305], [0.11130222880589333, -5.5311670730095325e-06, 0.5542568720512555], [0.12582533256019013, -4.5968904175798866e-05, 0.5545134340283863], [0.1412471281957704, -5.953158273020766e-05, 0.5541675495405965], [0.15581993916252385, -5.203251304853815e-05, 0.5541577237167129], [0.17154482593318035, -0.00010353905339288184, 0.554309943161527], [0.18620381147380896, -2.2691092015674624e-05, 0.5539928941461782], [0.20195041742617398, -9.03311123024407e-06, 0.5535950682696997], [0.21687117583530544, -2.7353663594534283e-05, 0.5540673796808833], [0.23270189473322025, 4.3913203363317097e-05, 0.553944579715135], [0.24735812188353326, -2.331688791913644e-06, 0.5535638007365293], [0.26266269472160614, 1.9981018664091618e-05, 0.5531073988882369], [0.276883073217968, 1.7286414727689728e-05, 0.5524372061313391], [0.29275758221616105, -6.124711104766971e-05, 0.5533422038204527], [0.3069900430155444, -8.227364887247214e-05, 0.553267728134368], [0.3220090771782561, -0.00021043301626559596, 0.5531263680959967], [0.33646736882755074, -0.00018901244785443118, 0.5535265069662173]]
# Y_rotated = [[0.08242176514612204, -0.16360973668117962, 0.5546385205460613], [0.08236196082237278, -0.1555777198718336, 0.5545225448678266], [0.08230614422817378, -0.1471749161446328, 0.5541594943648054], [0.08234667820875531, -0.1389936606950636, 0.5542858252478933], [0.08236061270562528, -0.13075888873941352, 0.5545069997733557], [0.08237961745238173, -0.12258648068376655, 0.5545190376270714], [0.08233762648336551, -0.114239286988817, 0.55409735590877], [0.0824028603567294, -0.10615103708066559, 0.5544532370311173], [0.0824066317319605, -0.09789777980208884, 0.5544296997714183], [0.08239389509697483, -0.08976170217347418, 0.554297930072534], [0.08248812928768763, -0.08165551980866417, 0.5550358087257921], [0.08243685470244481, -0.07348461905605952, 0.5546106812730622], [0.08247969416828681, -0.06529779674092272, 0.5546803384878758], [0.08238714927326275, -0.057130517108035545, 0.5541160012909262], [0.08244368090440547, -0.048949995916476405, 0.5541678001275598], [0.08253121116402455, -0.040813179389515876, 0.5546599969859064], [0.08253471503597533, -0.032727839864398534, 0.5543966261392632], [0.08271916662895247, -0.024466038433218918, 0.5552660831384817], [0.08265467651158297, -0.016352266481732443, 0.5546057899220873], [0.08268430884730282, -0.008150614119059232, 0.5542210606974051], [0.08280777558997078, -9.402649063289595e-06, 0.5547806950829162], [0.08276951601765767, 0.008175211649003545, 0.5543347507424566], [0.08282768552995484, 0.016454995375460746, 0.5544378798440199], [0.08293368528407265, 0.024588148333726353, 0.5539646240166527], [0.08306284726847918, 0.03276470561450448, 0.5542031479468492], [0.0830143336683936, 0.040993096600546536, 0.5537829437692291], [0.08309143189931092, 0.049213284472351876, 0.5538549515726929], [0.08332298222365576, 0.057531134650331335, 0.5546911531887309], [0.08343215398703041, 0.06589286301187677, 0.5547082617709643], [0.08357679728440989, 0.07415530458007288, 0.5549626407313917], [0.08356264189057437, 0.08245044548483799, 0.5546962892994037], [0.08358752042588743, 0.09075179089478869, 0.5541209592473505], [0.08376231058481438, 0.0992704245069849, 0.5542564815880437], [0.0839185304027795, 0.10779839307181906, 0.5546522005739793], [0.08392928611194313, 0.11606738979070376, 0.5541621798624564], [0.0841238257986618, 0.12456482966797515, 0.5544691124475968], [0.08433042514033164, 0.1330865026377586, 0.5546826832724419], [0.08440370827275237, 0.14165222294864077, 0.5544261348331061], [0.08464204400917177, 0.150465143721336, 0.5554008667686428], [0.08474219748511135, 0.15916398793336037, 0.5553059302420803]]
 
# robot_X = [[1170, -320.0, 1470], [1170, -305.5, 1470], [1170, -291.0, 1470], [1170, -276.5, 1470], [1170, -262.0, 1470], [1170, -247.5, 1470], [1170, -233.0, 1470], [1170, -218.5, 1470], [1170, -204.0, 1470], [1170, -189.5, 1470], [1170, -175.0, 1470], [1170, -160.5, 1470], [1170, -146.0, 1470], [1170, -131.5, 1470], [1170, -117.0, 1470], [1170, -102.5, 1470], [1170, -88.0, 1470], [1170, -73.5, 1470], [1170, -59.0, 1470], [1170, -44.5, 1470], [1170, -30.0, 1470], [1170, -15.5, 1470], [1170, -1.0, 1470], [1170, 13.5, 1470], [1170, 28.0, 1470], [1170, 42.5, 1470], [1170, 57.0, 1470], [1170, 71.5, 1470], [1170, 86.0, 1470], [1170, 100.5, 1470], [1170, 115.0, 1470], [1170, 129.5, 1470], [1170, 144.0, 1470], [1170, 158.5, 1470], [1170, 173.0, 1470], [1170, 187.5, 1470], [1170, 202.0, 1470], [1170, 216.5, 1470], [1170, 231.0, 1470], [1170, 245.5, 1470]]
# robot_Y = [[1010.0, 0, 1470], [1018.0, 0, 1470], [1026.0, 0, 1470], [1034.0, 0, 1470], [1042.0, 0, 1470], [1050.0, 0, 1470], [1058.0, 0, 1470], [1066.0, 0, 1470], [1074.0, 0, 1470], [1082.0, 0, 1470], [1090.0, 0, 1470], [1098.0, 0, 1470], [1106.0, 0, 1470], [1114.0, 0, 1470], [1122.0, 0, 1470], [1130.0, 0, 1470], [1138.0, 0, 1470], [1146.0, 0, 1470], [1154.0, 0, 1470], [1162.0, 0, 1470], [1170.0, 0, 1470], [1178.0, 0, 1470], [1186.0, 0, 1470], [1194.0, 0, 1470], [1202.0, 0, 1470], [1210.0, 0, 1470], [1218.0, 0, 1470], [1226.0, 0, 1470], [1234.0, 0, 1470], [1242.0, 0, 1470], [1250.0, 0, 1470], [1258.0, 0, 1470], [1266.0, 0, 1470], [1274.0, 0, 1470], [1282.0, 0, 1470], [1290.0, 0, 1470], [1298.0, 0, 1470], [1306.0, 0, 1470], [1314.0, 0, 1470], [1322.0, 0, 1470]]

# rz = -11.537033407648279
# rx = -1.5809076225850163
# ry = -1.532895559455464

# define the true objective function
def objective_5(x, a, b, c, d, e, f):
	return (a * x) + (b * x**2) + (c * x**3) + (d * x**4) + (e * x**5) + f

def objective_3(x, a, b, c, d):
	return (a * x) + (b * x**2) + (c * x**3) + d 

# print(objective_3(200, 0.02190307479931098, 5.1008431864073925e-06, 2.9249331956542283e-07, -0.3112005165859145))

def objective_2(x, b, c, a):
	return (b * x) + (c * x**2) + a  
def objective_1(x, c, b):
	return (c * x) + b  

def find_error_equation_5(rz, rx, ry, cam_data, ele_ca, robot_data, ele_ro):

    error_list = []
    error_list_temp = []
    cam_data = np.array(cam_data)*1000
    for i in range(len(cam_data)):
        # cam_data[i] = ((cam_data[i]*cal.Rz(math.radians(rz))*cal.Rx(math.radians(rx))*cal.Ry(math.radians(ry)))[0].tolist())[0]
        # cam_data_y[i] = ((cam_data_y[i]*cal.Rz(math.radians(rz))*cal.Rx(math.radians(rx))*cal.Ry(math.radians(ry)))[0].tolist())[0]
        error = cam_data[i][ele_ca]- robot_data[i][ele_ro]
        error_list.append([(robot_data[-1][ele_ro]-robot_data[0][ele_ro])*i/len(robot_data), error])

    x, y = np.array(error_list)[:,0], np.array(error_list)[:,1]
    popt, _ = curve_fit(objective_5, x, y)
    a, b, c, d, e, f = popt
    x_line = arange(min(x), max(x), (max(x) - min(x))/len(robot_data))
    # calculate the output for the range
    y_line = objective_5(x_line, a, b, c, d, e, f)
    
    min_index = abs(np.array(cam_data)[:,ele_ca])
    min_index = np.where(min_index == np.amin(min_index))[0][0]

    x_new = arange(min(x) -x_line[min_index], max(x)- x_line[min_index], (max(x) - min(x))/len(robot_data))
    y_downgrade = [value - y[min_index] for value in y]

    popt, _ = curve_fit(objective_5, x_new, y_downgrade)
    # summarize the parameter values
    a, b, c, d, e, f = popt
    y_line = objective_5(x_new, a, b, c, d, e, f)

    # create a line plot for the mapping function
    pyplot.scatter(x_new, y_downgrade)
    # pyplot.plot(x_line, y_line, '--', color='red')
    # pyplot.plot(x_new, y_line_2, '--', color='red')
    pyplot.plot(x_new, y_line, '--', color='red')
    pyplot.show()
    return [a, b, c, d, e, f]

def find_error_equation_3(rz, rx, ry, cam_data, ele_ca, robot_data, ele_ro):

    error_list = []
    error_list_temp = []
    cam_data = np.array(cam_data)*1000
    for i in range(len(cam_data)):
        cam_data[i] = ((cam_data[i]*cal.Rz(math.radians(rz))*cal.Rx(math.radians(rx))*cal.Ry(math.radians(ry)))[0].tolist())[0]
        # cam_data_y[i] = ((cam_data_y[i]*cal.Rz(math.radians(rz))*cal.Rx(math.radians(rx))*cal.Ry(math.radians(ry)))[0].tolist())[0]
        error = cam_data[i][ele_ca]- robot_data[i][ele_ro]
        error_list.append([(robot_data[-1][ele_ro]-robot_data[0][ele_ro])*i/len(robot_data), error])

    x, y = np.array(error_list)[:,0], np.array(error_list)[:,1]
    popt, _ = curve_fit(objective_3, x, y)
    a, b, c, d = popt
    x_line = arange(min(x), max(x), (max(x) - min(x))/len(robot_data))
    # calculate the output for the range
    y_line = objective_3(x_line, a, b, c, d)
    
    min_index = abs(np.array(cam_data)[:,ele_ca])
    min_index = np.where(min_index == np.amin(min_index))[0][0]

    x_new = arange(min(x) -x_line[min_index], max(x)- x_line[min_index], (max(x) - min(x))/len(robot_data))
    y_downgrade = [value - y[min_index] for value in y]
    if len(x_new) != len(y_downgrade):
        x_new = np.linspace(min(x) -x_line[min_index], max(x)- x_line[min_index],len(y_downgrade),endpoint=True)

    popt, _ = curve_fit(objective_3, x_new, y_downgrade)
    # summarize the parameter values
    a, b, c, d = popt
    y_line = objective_3(x_new, a, b, c, d)

    # create a line plot for the mapping function
    pyplot.scatter(x_new, y_downgrade)
    # pyplot.plot(x_line, y_line, '--', color='red')
    # pyplot.plot(x_new, y_line_2, '--', color='red')
    pyplot.plot(x_new, y_line, '--', color='red')
    pyplot.show()
    return [a, b, c, d]
# print(find_error_equation(rz, rx, ry, X, 0, robot_X, 1))
# print(find_error_equation(rz, rx, ry, Y, 1, robot_Y, 0))